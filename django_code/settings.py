"""
Django settings for django_code project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# reading .env file
import os

from dotenv import load_dotenv
load_dotenv()

ENV = os.environ.get
ENV = os.getenv

SECRET_KEY = ENV("SECRET_KEY")

LOGGING = {
    'version': 1,
    'formatters': {
        'simple': {
            'format': '[{levelname}] /{module}/ {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{levelname} {asctime} {module} \{process:d} {thread:d}/ {message}',
            'style': '{',
        },
    },
    'filters': {
        # 'special': {
        #     '()': 'project.logging.SpecialFilter',
        #     'foo': 'bar',   
        #     #'argument': 'value',
        # },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.joinpath('logs/debug.log'),
            'formatter': 'verbose',
        },
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.file': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 'django.request': {
        #     'handlers': ['mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': False,
        # },
    }
}


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'oauth2_provider',
    'drf_yasg',
    'api.apps.ApiConfig',
    'sudoku.apps.SudokuConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware'


]
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'django_code.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR.joinpath('templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_code.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': ENV('MYSQL_DB'),
        'USER': ENV('MYSQL_USER'),
        'PASSWORD': ENV('MYSQL_PASSWORD'),
        'HOST': ENV('MYSQL_HOST'),
        'PORT': ENV('MYSQL_PORT'),
    },
    # 'psql': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': 'psql_db',
    #     'USER': 'postgres',
    #     'PASSWORD': 'psql_user',
    #     'HOST': '10.10.2.30',
    #     'PORT': '5432',
    # }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ],
    
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope', 
        'write': 'Write scope',
        'execute': 'Execute scope'
        },
    'DEFAULT_SCOPES': {
        'read': 'Read scope',
    }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SWAGGER_SETTINGS = {
    "SUPPORTED_SUBMIT_METHODS": [
        "get",
        "post",
        "put",
        "delete"
    ],
    "SECURITY_DEFINITIONS": {
        "Bearer":{
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "Input value format \<Bearer \<key\>\>",
        },
        "OAuth2password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "http://localhost:8000/o/token/",
            "scopes": 
            {
                "write": "modify data in your account",
                "read": "read your data",
                "execute": "execute api functions"
            },
        },
    },
    'OAUTH2_CONFIG': {
        'clientId': ENV('AUTH_PASSWORD_CLIENT_ID'),
        'clientSecret': ENV('AUTH_PASSWORD_CLIENT_SECRET'),
        'appName': 'api'
    },
    "USE_SESSION_AUTH": False,
    "JSON_EDITOR": True,
    "REFETCH_SCHEMA_ON_LOGOUT": True,
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Europe/Simferopol'


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = BASE_DIR.joinpath('staticfiles')

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR.joinpath('static'),
    # BASE_DIR.joinpath('bootstrap'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL='/accounts/login/'
# LOGIN_REDIRECT_URL='/accounts/login/'
# LOGIN_REDIRECT_URL = '/api/'

# ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
